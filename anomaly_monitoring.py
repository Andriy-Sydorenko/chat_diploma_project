import asyncio
import json
import logging
import re
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, Optional, Set

from fastapi import FastAPI, WebSocket, WebSocketDisconnect

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", filename="websocket_monitor.log"
)
logger = logging.getLogger(__name__)


@dataclass
class ConnectionMetrics:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∑'—î–¥–Ω–∞–Ω–Ω—è"""

    ip: str
    connect_time: datetime
    message_count: int = 0
    last_message_time: Optional[datetime] = None
    alerts: list = None
    messages_per_minute: float = 0.0

    def __post_init__(self):
        if self.alerts is None:
            self.alerts = []


class WebSocketMonitor:
    def __init__(self):
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        self.thresholds = {
            "max_messages_per_minute": 100,
            "max_connections_per_ip": 5,
            "max_message_size": 1024 * 1024,  # 1MB
            "min_message_interval": 0.05,  # 50ms
            "suspicious_patterns": [
                re.compile(r"<script.*?>.*?</script>", re.I | re.S),
                re.compile(r"eval\(.*?\)"),
                re.compile(r"javascript:", re.I),
                re.compile(r"onload=", re.I),
                re.compile(r"onerror=", re.I),
            ],
        }

        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å —Ç–∞ –º–µ—Ç—Ä–∏–∫
        self.connections: Dict[WebSocket, ConnectionMetrics] = {}
        self.ip_connections: Dict[str, Set[WebSocket]] = defaultdict(set)

        # –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ IP
        self.blocked_ips: Set[str] = set()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        asyncio.create_task(self._cleanup_old_data())

    async def handle_new_connection(self, websocket: WebSocket, ip: str) -> bool:
        """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ IP –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
        if ip in self.blocked_ips:
            logger.warning(f"Blocked connection attempt from banned IP: {ip}")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑'—î–¥–Ω–∞–Ω—å –∑ IP
        if len(self.ip_connections[ip]) >= self.thresholds["max_connections_per_ip"]:
            logger.warning(f"Too many connections from IP: {ip}")
            await self._handle_violation(ip, "Too many connections", severity="medium")
            return False

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        self.connections[websocket] = ConnectionMetrics(ip=ip, connect_time=datetime.now())
        self.ip_connections[ip].add(websocket)

        logger.info(f"New connection established from IP: {ip}")
        return True

    async def handle_message(self, websocket: WebSocket, message: str) -> bool:
        """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if websocket not in self.connections:
            return False

        metrics = self.connections[websocket]
        current_time = datetime.now()

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
        metrics.message_count += 1
        if metrics.last_message_time:
            interval = (current_time - metrics.last_message_time).total_seconds()
            if interval < self.thresholds["min_message_interval"]:
                await self._handle_violation(
                    metrics.ip, "Message interval too small", websocket=websocket, severity="low"
                )

        metrics.last_message_time = current_time

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        violations = []

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(message.encode("utf-8")) > self.thresholds["max_message_size"]:
            violations.append("Message size exceeded")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        time_connected = (current_time - metrics.connect_time).total_seconds() / 60
        metrics.messages_per_minute = metrics.message_count / time_connected if time_connected > 0 else 0

        if metrics.messages_per_minute > self.thresholds["max_messages_per_minute"]:
            violations.append("Message rate exceeded")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        for pattern in self.thresholds["suspicious_patterns"]:
            if pattern.search(message):
                violations.append("Suspicious content detected")
                break

        # –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä—É—à–µ–Ω—å
        if violations:
            severity = "high" if len(violations) > 1 else "medium"
            await self._handle_violation(metrics.ip, ", ".join(violations), websocket=websocket, severity=severity)
            return False

        return True

    async def handle_disconnect(self, websocket: WebSocket):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        if websocket in self.connections:
            metrics = self.connections[websocket]
            self.ip_connections[metrics.ip].remove(websocket)
            if not self.ip_connections[metrics.ip]:
                del self.ip_connections[metrics.ip]
            del self.connections[websocket]
            logger.info(f"Connection closed for IP: {metrics.ip}")

    async def _handle_violation(
        self, ip: str, reason: str, websocket: Optional[WebSocket] = None, severity: str = "low"
    ):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ—Ä—É—à–µ–Ω—å –±–µ–∑–ø–µ–∫–∏"""
        logger.warning(f"Security violation from {ip}: {reason} (severity: {severity})")

        alert = {"timestamp": datetime.now().isoformat(), "ip": ip, "reason": reason, "severity": severity}

        if websocket and websocket in self.connections:
            self.connections[websocket].alerts.append(alert)

        if severity == "high":
            self.blocked_ips.add(ip)
            # –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å –∑ —Ü—å–æ–≥–æ IP
            for ws in self.ip_connections.get(ip, set()).copy():
                await self._close_connection(ws, 1008, "Security violation")

        elif severity == "medium":
            if websocket:
                await self._close_connection(websocket, 1003, "Security violation")

        # –ó–∞–ø–∏—Å —É –ª–æ–≥
        logger.warning(json.dumps(alert))

        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —á–µ—Ä–µ–∑ Slack, Email —Ç–æ—â–æ
        await self._send_alert_notification(alert)

    async def _close_connection(self, websocket: WebSocket, code: int, reason: str):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            await websocket.close(code=code, reason=reason)
        except Exception as e:
            logger.error(f"Error closing WebSocket connection: {e}")
        finally:
            await self.handle_disconnect(websocket)

    async def _cleanup_old_data(self):
        """–§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        while True:
            try:
                current_time = datetime.now()
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å, –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏
                for websocket, metrics in list(self.connections.items()):
                    if metrics.last_message_time and current_time - metrics.last_message_time > timedelta(hours=1):
                        await self.handle_disconnect(websocket)
            except Exception as e:
                logger.error(f"Error in cleanup task: {e}")
            await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω

    async def _send_alert_notification(self, alert: dict):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è"""
        # –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑—ñ Slack
        # from slack_sdk.web.async_client import AsyncWebClient
        # slack = AsyncWebClient(token="your-token")
        # await slack.chat_postMessage(
        #     channel="#security-alerts",
        #     text=f"üö® Security Alert!\nIP: {alert['ip']}\nReason: {alert['reason']}\nSeverity: {alert['severity']}"
        # )
        pass


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ FastAPI
app = FastAPI()
monitor = WebSocketMonitor()


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è IP –∫–ª—ñ—î–Ω—Ç–∞
    client_ip = websocket.client.host

    # –ü—Ä–∏–π–Ω—è—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    if not await monitor.handle_new_connection(websocket, client_ip):
        await websocket.close(code=1008, reason="Connection rejected")
        return

    await websocket.accept()

    try:
        while True:
            message = await websocket.receive_text()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if not await monitor.handle_message(websocket, message):
                await websocket.close(code=1008, reason="Message rejected")
                break

            # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...
            await websocket.send_text(f"Message received: {message}")

    except WebSocketDisconnect:
        await monitor.handle_disconnect(websocket)
    except Exception as e:
        logger.error(f"Error in WebSocket connection: {e}")
        await monitor.handle_disconnect(websocket)


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è
@app.get("/monitor/stats")
async def get_monitor_stats():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    stats = {
        "active_connections": len(monitor.connections),
        "connections_per_ip": {ip: len(connections) for ip, connections in monitor.ip_connections.items()},
        "blocked_ips": list(monitor.blocked_ips),
    }
    return stats


@app.post("/monitor/block-ip/{ip}")
async def block_ip(ip: str):
    """–†—É—á–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è IP"""
    monitor.blocked_ips.add(ip)
    # –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å –∑ —Ü—å–æ–≥–æ IP
    if ip in monitor.ip_connections:
        for websocket in monitor.ip_connections[ip].copy():
            await monitor._close_connection(websocket, 1008, "IP blocked")
    return {"status": "success", "message": f"IP {ip} blocked"}


@app.post("/monitor/unblock-ip/{ip}")
async def unblock_ip(ip: str):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è IP"""
    monitor.blocked_ips.discard(ip)
    return {"status": "success", "message": f"IP {ip} unblocked"}
